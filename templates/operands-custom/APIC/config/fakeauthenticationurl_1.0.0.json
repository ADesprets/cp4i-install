{
  "swagger": "2.0",
  "info": {
    "title": "FakeAuthenticationURL",
    "x-ibm-name": "fakeauthenticationurl",
    "version": "1.0.0",
    "description": "Use to simulate a user registry to test OAuth. The user registry should be used as a URL Authentication user registry. The endpoint is $(catalog)/fakeauth/v1/basic-auth"
  },
  "x-ibm-configuration": {
    "cors": {
      "enabled": true
    },
    "gateway": "datapower-api-gateway",
    "type": "rest",
    "phase": "realized",
    "enforced": true,
    "testable": true,
    "assembly": {
      "execute": [
        {
          "operation-switch": {
            "version": "2.0.0",
            "title": "operation-switch",
            "case": [
              {
                "operations": [
                  {
                    "verb": "get",
                    "path": "/basic-auth"
                  }
                ],
                "execute": [
                  {
                    "gatewayscript": {
                      "version": "2.0.0",
                      "title": "BA authentication logic",
                      "source": "var reqauth=context.get('request.headers.authorization').split(' ');\nvar splitval=new Buffer((reqauth[1] || ''),'base64').toString('utf8').split(':');\nvar username=splitval[0] || '';\nvar password=splitval[1] || ''; \nconsole.error('>>> User credentials: [' + username + ':' + password + ']');\nif (username==password) {\n  context.set('message.headers.api-authenticated-credential', 'cn=' + username + ',email=' + username + '@fr.ibm.com');\n  context.set('message.status.code', 200);\n  context.message.body.write({\"username\": username, \"email\": username + '@fr.ibm.com', \"first_name\": username, \"last_name\": username});\n}\nelse {\n    context.set('message.status.code', 401);\n}"
                    }
                  }
                ]
              },
              {
                "operations": [
                  {
                    "verb": "get",
                    "path": "/ping"
                  }
                ],
                "execute": [
                  {
                    "gatewayscript": {
                      "version": "2.0.0",
                      "title": "ping logic",
                      "description": "This gateway script just return hello world message.",
                      "source": "var outmessage={\"message\": \"hello world!\"};\r\nvar outmessageS= JSON.stringify(outmessage);\r\nconsole.error('>>> response:' + outmessageS);\r\ncontext.message.body.write(outmessage);"
                    }
                  }
                ]
              },
              {
                "operations": [
                  {
                    "verb": "post",
                    "path": "/authenticate"
                  }
                ],
                "execute": [
                  {
                    "parse": {
                      "version": "2.2.0",
                      "title": "parse",
                      "parse-settings-reference": {
                        "default": "apic-default-parsesettings"
                      }
                    }
                  },
                  {
                    "gatewayscript": {
                      "version": "2.0.0",
                      "title": "gatewayscript",
                      "source": "var username = context.get('message.body.uid');\r\nvar password = context.get('message.body.pwd');\r\nconsole.error('>>> User credentials: [' + username + ':' + password + ']');\r\nif (username ==  password ) {\r\n\tcontext.set('message.headers.api-authenticated-credential', 'cn=' + username + ',email=' + username + '@fr.ibm.com');\r\n\tcontext.set('message.status.code', 200);\r\n\tcontext.set('message.headers.content-type', 'application/json');\r\n    context.message.body.write({\"username\": username, \"email\": username + '@fr.ibm.com', \"first_name\": username, \"last_name\": username});\r\n} else {\r\n\tcontext.set('message.status.code', 401);\r\n  context.message.body.write({\"error\": \"Unauthenticated\"});\r\n}"
                    }
                  }
                ]
              },
              {
                "operations": [
                  {
                    "verb": "post",
                    "path": "/authenticate/{uid}/{pwd}"
                  }
                ],
                "execute": [
                  {
                    "gatewayscript": {
                      "version": "2.0.0",
                      "title": "gatewayscript",
                      "source": "var username = context.get(\"request.parameters.uid.values[0]\");\r\nvar password = context.get(\"request.parameters.pwd.values[0]\");\r\nconsole.error('>>> User credentials: [' + username + ':' + password + ']');\r\nif (username == password ) {\r\n\tcontext.set('message.headers.api-authenticated-credential', 'cn=' + username + ',email=' + username + '@fr.ibm.com');\r\n\tcontext.set('message.status.code', 200);\r\n\tcontext.set('message.headers.content-type', 'application/json');\r\n    context.message.body.write({\"username\": username, \"email\": username + '@fr.ibm.com', \"first_name\": username, \"last_name\": username});\r\n} else {\r\n\tcontext.set('message.status.code', 401);\r\n}"
                    }
                  }
                ]
              }
            ],
            "otherwise": []
          }
        }
      ]
    },
    "properties": {
      "target-url": {
        "value": "http://example.com/operation-name",
        "description": "The URL of the target service",
        "encoded": false
      }
    },
    "activity-log": {
      "enabled": true,
      "success-content": "activity",
      "error-content": "payload"
    },
    "servers": [
      {
        "url": "https://cp4i-apic-gw-gateway-cp4i.cp4iad22023-b34dfa42ccf328c7da72e2882c1627b1-0000.eu-de.containers.appdomain.cloud/org1/sandbox/fakeauth/v1",
        "description": "",
        "type": [
          "production",
          "development"
        ]
      }
    ],
    "oauth-servers": []
  },
  "basePath": "/fakeauth/v1",
  "paths": {
    "/basic-auth": {
      "parameters": [
        {
          "name": "Authorization",
          "required": true,
          "in": "header",
          "type": "string",
          "description": "Basic Authentication header"
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "tags": [],
        "description": "The credentials uid and password should be provided using the standard Basic Authentication (Authorization header). When using the **same uid and password** the authentication succeeds, when they are different the authentication fails. This is obviously for demonstration purpose.\nFor example:  > Basic: Zm9vOmZvbw The base64 decoding of Zm9vOmZvbw is: foo:foo. \n\nDo not omit the **Basic: ** in your tests, it will fail otherwise."
      }
    },
    "/authenticate": {
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "When using the same uid and password the authentication succeeds, when they are different the authentication fails. This is obviously for demonstration purpose. For example: \n``` { \"uid\": \"foo\", \"pwd\": \"foo\" } ``` \nHint: you can **use the generate link** to generate the body automatically.",
        "parameters": [
          {
            "schema": {
              "type": "object"
            },
            "in": "body",
            "name": "credentials",
            "required": true,
            "description": "The credentials (uid and password) should be provided in the **body.**"
          }
        ]
      }
    },
    "/authenticate/{uid}/{pwd}": {
      "parameters": [
        {
          "name": "uid",
          "in": "path",
          "required": true,
          "description": "The uid of the User",
          "type": "string"
        },
        {
          "name": "pwd",
          "in": "path",
          "required": true,
          "type": "string",
          "description": "The password of the User"
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "string"
            }
          }
        },
        "description": "This path is used to validate that the API Connect is correctly answering. No argument, no backend invocation,  just a ping.\nThe message generated is\n`{\"message\": \"hello world!\"}`"
      }
    }
  },
  "securityDefinitions": {
    "clientID": {
      "type": "apiKey",
      "in": "header",
      "name": "X-IBM-Client-Id"
    }
  },
  "security": [
    {
      "clientID": []
    }
  ],
  "schemes": [
    "https"
  ],
  "definitions": {
    "UserCredential": {
      "type": "object",
      "description": "Object containing the credentials in order to perform authentication (uid and password)",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The user id of the user",
          "example": "foo"
        },
        "pwd": {
          "type": "string",
          "description": "The password associated with the user",
          "example": "foo"
        }
      }
    },
    "AuthenticatedUser": {
      "type": "object",
      "description": "Object returned when a user is authenticated",
      "additionalProperties": false,
      "properties": {
        "username": {
          "type": "string",
          "description": "The user id of the authenticated user",
          "example": "myuser"
        },
        "email": {
          "type": "string",
          "description": "The email of the authenticated user",
          "example": "myuser@example.com"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the user",
          "example": "My"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the user",
          "example": "User"
        }
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "responses": {}
}