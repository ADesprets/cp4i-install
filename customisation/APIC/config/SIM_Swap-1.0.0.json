{
  "openapi": "3.0.3",
  "info": {
    "title": "SIM Swap",
    "description": "The SIM swap API provides a programmable interface for developers and other users (capabilities consumers) to request the last date of a SIM swap performed on the mobile line, or, to check whether a SIM swap has been performed during a past period.\n\n# Introduction\n\nThe SIM Swap API performs real-time checks on the last SIM Swap event.\n\nThe SIM Swap API is useful to prevent fraud by reducing the risk of account takeover fraud by strengthening SIM based authentication processes such as SMS One-time passwords. Fraudsters are using SIM swap techniques to intercept SMS messages and reset passwords or receive verification codes that allow them to access protected accounts.\n\nThe SIM Swap API can also be used to protect non-automated actions. For example, when a call center expert contacts a user to clarify or confirm a sensitive operation.\n\nThis API is used by an application to get information about a mobile line latest SIM swap date. It can be easily integrated and used through this secured API and allows SPs (Service Provider) to get this information an easy & secured way. The API provides management of 2 endpoints answering 2 distinct questions:\n\n* When did the last SIM swap occur?\n* Has a SIM swap occurred during last n hours?\n\n# Relevant terms and definitions\n\n**SIM swap**:\nA SIM swap is a process in which a user's mobile phone number (MSISDN) is associated with a new SIM card (IMSI). This is typically done by contacting the user's mobile service provider and requesting a new SIM card for various reasons, such as a lost or damaged SIM card or upgrading to a new phone.\n\nSIM swap also happens during other actions like changing user's phone number, changing mobile service provider keeping user's mobile phone number or when activating a new SIM associated to the same phone number, known as multisim service. New subscription is considered as a SIM swap as well, the MSISDN which can be used by another person earlier, is associated with a SIM card it was not associated before.\n\n# API functionality\n\nThe API provides 2 operations:\n\n- POST retrieve-date : Provides timestamp of latest SIM swap, if any, for a given phone number. If no swap has been performed, the API will return the SIM activation date (the timestamp of the first time that the sim connected to the network) by default, unless this is not possible due to local regulations preventing the safekeeping of the information for longer than the stated period of time. If this is the case, a `null` value will be returned.\n\n- POST check: Checks if SIM swap has been performed during a past period (defined in the request with 'maxAge' attribute) for a given phone number.\n\n# Authorization and authentication\n\nThe \"Camara Security and Interoperability Profile\" provides details on how a client requests an access token. Please refer to Identify and Consent Management (https://github.com/camaraproject/IdentityAndConsentManagement/) for the released version of the Profile.\n\nWhich specific authorization flows are to be used will be determined during onboarding process, happening between the API Client and the Telco Operator exposing the API, taking into account the declared purpose for accessing the API, while also being subject to the prevailing legal framework dictated by local legislation.\n\nIt is important to remark that in cases where personal user data is processed by the API, and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of 3-legged access tokens becomes mandatory. This measure ensures that the API remains in strict compliance with user privacy preferences and regulatory obligations, upholding the principles of transparency and user-centric data control.\n\n# Identifying a phone number from the access token\n\nThis specification defines the `phoneNumber` field as optional in API requests, specifically in cases where the API is accessed using a 3-legged access token, and the phone number can be uniquely identified by the token. This approach simplifies API usage for API consumers by relying on the information associated with the access token used to invoke the API.\n\n## Handling of phone number information:\n\n### Optional `phoneNumber` field for 3-legged tokens:\n\n- When using a 3-legged access token, the phone number associated with the access token must be considered as the phone number for the API request. This means that the `phoneNumber` field is not required in the request, and if included it must identify the same phone number, therefore **it is recommended NOT to include it in these scenarios** to simplify the API usage and avoid additional validations.\n\n### Validation mechanism:\n\n- The server will extract the phone number identification from the access token, if available.\n- If the API request additionally includes a `phoneNumber` field when using a 3-legged access token, the API will validate that the phone number provided matches the one associated with the access token.\n- If there is a mismatch, the API will respond with a 403 - INVALID_TOKEN_CONTEXT error, indicating that the phone number information in the request does not match the token.\n\n### Error handling for unidentifiable phone number:\n\n- If the `phoneNumber` field is not included in the request and the phone number information cannot be derived from the 3-legged access token, the server will return a 422 `UNIDENTIFIABLE_PHONE_NUMBER` error.\n\n### Restrictions for tokens without an associated authenticated phone number:\n\n- For scenarios which do not have a phone number associated to the token during the authentication flow, e.g. 2-legged access tokens, the `phoneNumber` field MUST be provided in the API request. This ensures that the phone number is explicit and valid for each API call made with these tokens.\n\n# Further info and support\n\n[GSMA Mobile Connect Account Takeover Protection specification](https://www.gsma.com/identity/wp-content/uploads/2022/12/IDY.24-Mobile-Connect-Account-Takeover-Protection-Definition-and-Technical-Requirements-v2.0.pdf) was used as source of input for this API. For more about Mobile Connect, please see [Mobile Connect website](https://mobileconnect.io/).\n\n(FAQs will be added in a later version of the documentation)\n",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0",
    "x-camara-commonalities": "0.4.0",
    "x-ibm-name": "sim-swap"
  },
  "externalDocs": {
    "description": "Product documentation at Camara",
    "url": "https://github.com/camaraproject/SimSwap"
  },
  "servers": [
    {
      "url": "https://cp4i-apic-gw-gateway-cp4i.apps.66d5d603d361e1cd7ea1cfc0.ocp.techzone.ibm.com/org1/sandbox/sim-swap/v1"
    }
  ],
  "paths": {
    "/retrieve-date": {
      "post": {
        "tags": [
          "Retrieve SIM swap date"
        ],
        "description": "Get timestamp of last SIM swap event for a mobile user account provided with phone number.",
        "operationId": "retrieveSimSwapDate",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-correlator"
          }
        ],
        "requestBody": {
          "description": "Create a SIM swap date request for a phone number.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSimSwapDate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contains information about SIM swap change",
            "headers": {
              "x-correlator": {
                "$ref": "#/components/headers/x-correlator"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimSwapInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Generic400"
          },
          "401": {
            "$ref": "#/components/responses/Generic401"
          },
          "403": {
            "$ref": "#/components/responses/Generic403"
          },
          "404": {
            "$ref": "#/components/responses/Generic404"
          },
          "422": {
            "$ref": "#/components/responses/Generic422"
          },
          "500": {
            "$ref": "#/components/responses/Generic500"
          },
          "503": {
            "$ref": "#/components/responses/Generic503"
          },
          "504": {
            "$ref": "#/components/responses/Generic504"
          }
        },
        "security": [
          {
            "nativeproviderscheme": [
              "read"
            ]
          }
        ]
      }
    },
    "/check": {
      "post": {
        "tags": [
          "Check SIM swap"
        ],
        "description": "Check if SIM swap has been performed during a past period",
        "operationId": "checkSimSwap",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-correlator"
          }
        ],
        "requestBody": {
          "description": "Create a check SIM swap request for a phone number.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCheckSimSwap"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns whether a SIM swap has been performed during a past period",
            "headers": {
              "x-correlator": {
                "$ref": "#/components/headers/x-correlator"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckSimSwapInfo"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Generic400"
          },
          "401": {
            "$ref": "#/components/responses/Generic401"
          },
          "403": {
            "$ref": "#/components/responses/Generic403"
          },
          "404": {
            "$ref": "#/components/responses/Generic404"
          },
          "422": {
            "$ref": "#/components/responses/Generic422"
          },
          "500": {
            "$ref": "#/components/responses/Generic500"
          },
          "503": {
            "$ref": "#/components/responses/Generic503"
          },
          "504": {
            "$ref": "#/components/responses/Generic504"
          }
        },
        "security": [
          {
            "nativeproviderscheme": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "nativeproviderscheme": {
        "type": "oauth2",
        "x-ibm-oauth-provider": "nativeprovider",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://cp4i-apic-gw-gateway-cp4i.apps.66d5d603d361e1cd7ea1cfc0.ocp.techzone.ibm.com/org1/sandbox/nativeprovider/oauth2/authorize",
            "tokenUrl": "https://cp4i-apic-gw-gateway-cp4i.apps.66d5d603d361e1cd7ea1cfc0.ocp.techzone.ibm.com/org1/sandbox/nativeprovider/oauth2/token",
            "scopes": {
              "read": "read sample"
            }
          }
        }
      }
    },
    "parameters": {
      "x-correlator": {
        "name": "x-correlator",
        "in": "header",
        "description": "Correlation id for the different services",
        "schema": {
          "type": "string"
        }
      }
    },
    "headers": {
      "x-correlator": {
        "description": "Correlation id for the different services",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "SimSwapInfo": {
        "type": "object",
        "required": [
          "latestSimChange"
        ],
        "properties": {
          "latestSimChange": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of latest SIM swap performed. It must follow [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) and must have time zone. Recommended format is yyyy-MM-dd'T'HH:mm:ss.SSSZ (i.e. which allows 2023-07-03T14:27:08.312+02:00 or 2023-07-03T12:27:08.312Z)",
            "nullable": true,
            "example": "2023-07-03T14:27:08.312+02:00"
          }
        }
      },
      "CheckSimSwapInfo": {
        "type": "object",
        "required": [
          "swapped"
        ],
        "properties": {
          "swapped": {
            "type": "boolean",
            "description": "Indicates whether the SIM card has been swapped during the period within the provided age."
          }
        }
      },
      "PhoneNumber": {
        "type": "string",
        "pattern": "^\\+[1-9][0-9]{4,14}$",
        "example": "+346661113334",
        "description": "A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, prefixed with '+'."
      },
      "ErrorInfo": {
        "type": "object",
        "required": [
          "status",
          "code",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "description": "HTTP response status code"
          },
          "code": {
            "type": "string",
            "description": "Code given to this error"
          },
          "message": {
            "type": "string",
            "description": "Detailed error description"
          }
        }
      },
      "CreateCheckSimSwap": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "maxAge": {
            "type": "integer",
            "example": 240,
            "description": "Period in hours to be checked for SIM swap.\n",
            "format": "int32",
            "minimum": 1,
            "maximum": 2400,
            "default": 240
          }
        }
      },
      "CreateSimSwapDate": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        }
      }
    },
    "responses": {
      "Generic400": {
        "description": "Bad Request",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_400_INVALID_ARGUMENT": {
                "description": "Invalid Argument. Generic Syntax Exception",
                "value": {
                  "status": 400,
                  "code": "INVALID_ARGUMENT",
                  "message": "Client specified an invalid argument, request body or query param."
                }
              }
            }
          }
        }
      },
      "Generic401": {
        "description": "Unauthorized",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_401_UNAUTHENTICATED": {
                "description": "Request cannot be authenticated",
                "value": {
                  "status": 401,
                  "code": "UNAUTHENTICATED",
                  "message": "Request not authenticated due to missing, invalid, or expired credentials."
                }
              }
            }
          }
        }
      },
      "Generic403": {
        "description": "Forbidden",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_403_PERMISSION_DENIED": {
                "description": "Permission denied. OAuth2 token access does not have the required scope or when the user fails operational security",
                "value": {
                  "status": 403,
                  "code": "PERMISSION_DENIED",
                  "message": "Client does not have sufficient permissions to perform this action."
                }
              },
              "GENERIC_403_INVALID_TOKEN_CONTEXT": {
                "description": "Reflect some inconsistency between information in some field of the API and the related OAuth2 Token",
                "value": {
                  "status": 403,
                  "code": "INVALID_TOKEN_CONTEXT",
                  "message": "phoneNumber is not consistent with access token"
                }
              }
            }
          }
        }
      },
      "Generic404": {
        "description": "Not found",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_404_NOT_FOUND": {
                "description": "Resource is not found",
                "value": {
                  "status": 404,
                  "code": "NOT_FOUND",
                  "message": "The specified resource is not found."
                }
              }
            }
          }
        }
      },
      "Generic422": {
        "description": "Unprocessable Content",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_422_NOT_SUPPORTED": {
                "description": "Not Supported",
                "value": {
                  "status": 422,
                  "code": "NOT_SUPPORTED",
                  "message": "Service not supported for this phoneNumber"
                }
              },
              "UNIDENTIFIABLE_PHONE_NUMBER": {
                "description": "The phone number is not included in the request and the phone number information cannot be derived from the 3-legged access token",
                "value": {
                  "status": 422,
                  "code": "UNIDENTIFIABLE_PHONE_NUMBER",
                  "message": "The phone number cannot be identified"
                }
              }
            }
          }
        }
      },
      "Generic500": {
        "description": "Internal Server Error",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_500_INTERNAL": {
                "description": "Problem in Server side. Regular Server Exception",
                "value": {
                  "status": 500,
                  "code": "INTERNAL",
                  "message": "Unknown server error. Typically a server bug."
                }
              }
            }
          }
        }
      },
      "Generic503": {
        "description": "Service Unavailable",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_503_UNAVAILABLE": {
                "description": "Service is not available. Temporary situation usually related to maintenance process in the server side",
                "value": {
                  "status": 503,
                  "code": "UNAVAILABLE",
                  "message": "Service Unavailable."
                }
              }
            }
          }
        }
      },
      "Generic504": {
        "description": "Gateway Timeout",
        "headers": {
          "x-correlator": {
            "$ref": "#/components/headers/x-correlator"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "examples": {
              "GENERIC_504_TIMEOUT": {
                "description": "API Server Timeout",
                "value": {
                  "status": 504,
                  "code": "TIMEOUT",
                  "message": "Request timeout exceeded."
                }
              }
            }
          }
        }
      }
    }
  },
  "x-ibm-configuration": {
    "cors": {
      "enabled": true
    },
    "phase": "realized",
    "enforced": true,
    "type": "rest",
    "testable": true,
    "oauth-servers": {
      "nativeproviderscheme": {
        "authorizationCode": {
          "tokenUrls": [
            "https://cp4i-apic-gw-gateway-cp4i.apps.66d5d603d361e1cd7ea1cfc0.ocp.techzone.ibm.com/org1/sandbox/nativeprovider/oauth2/token"
          ],
          "authorizationUrls": [
            "https://cp4i-apic-gw-gateway-cp4i.apps.66d5d603d361e1cd7ea1cfc0.ocp.techzone.ibm.com/org1/sandbox/nativeprovider/oauth2/authorize"
          ],
          "refreshUrls": []
        }
      }
    }
  },
  "security": [
    {
      "nativeproviderscheme": []
    }
  ],
  "tags": [
    {
      "name": "Camara",
      "description": "See `https://camaraproject.org/`"
    }
  ],
  "x-ibm-endpoints": [
    {
      "url": "https://cp4i-apic-gw-gateway-cp4i.apps.66d5d603d361e1cd7ea1cfc0.ocp.techzone.ibm.com/org1/sandbox/sim-swap/v1"
    }
  ]
}