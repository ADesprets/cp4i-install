sapiVersion: eventstreams.ibm.com/v1beta2
kind: KafkaConnector
metadata:
  name: datagen
  labels:
    eventstreams.ibm.com/cluster: datagen-host
spec:
  class: com.ibm.eventautomation.demos.loosehangerjeans.DatagenSourceConnector
  tasksMax: 1
  config:
    #
    # format of messages to produce
    #
    key.converter: org.apache.kafka.connect.storage.StringConverter
    key.converter.schemas.enable: false
    value.converter: org.apache.kafka.connect.json.JsonConverter
    value.converter.schemas.enable: false

    #
    # name of the topics to produce to
    #
    topic.name.orders: LH.ORDERS
    topic.name.cancellations: LH.CANCELLATIONS
    topic.name.badgeins: LH.DOORS
    topic.name.stockmovements: LH.STOCK
    topic.name.newcustomers: LH.CUSTOMERS
    topic.name.sensorreadings: LH.SENSORS

    #
    # how often events should be created
    #
    timings.ms.orders: 10000
    timings.ms.badgeins: 10000
    timings.ms.cancellations: 10000
    timings.ms.stockmovements: 60000
    timings.ms.newcustomers: 10000
    timings.ms.sensorreadings: 10000

    #
    # how much of a delay to introduce when producing events
    #
    #    this is to simulate events from systems that are slow to
    #    produce to Kafka
    #
    #    events with a delay will be produced to Kafka a short
    #    time after the timestamp contained in the message payload
    #
    #    the result is that the timestamp in the message metadata
    #    will be later then the message in the message payload
    #
    #    because the delay will be random (up to the specified max)
    #    the impact of this is that messages on the topic will be
    #    slightly out of sequence (according to the timestamp in
    #    the message payload)
    #
    # orders
    eventdelays.orders.secs.max: 0             # payload time matches event time by default
    # cancellations
    eventdelays.cancellations.secs.max: 0      # payload time matches event time by default
    # stock movements
    eventdelays.stockmovements.secs.max: 0     # payload time matches event time by default
    # door badge events
    eventdelays.badgeins.secs.max: 180         # payload time can be up to 3 minutes (180 secs) behind event time
    # new customer events
    eventdelays.newcustomers.secs.max: 0       # payload time matches event time by default
    # sensor readings events
    eventdelays.sensorreadings.secs.max: 300   # payload time can be up to 5 minutes (300 secs) behind event time
    # online orders
    eventdelays.onlineorders.secs.max: 0       # payload time matches event time by default
    # out-of-stock events
    eventdelays.outofstocks.secs.max: 0        # payload time matches event time by default

    #
    # how many events should be duplicated
    #
    #   this is to simulate events from systems that offer
    #   at-least once semantics
    #
    #   messages will occasionally be duplicated, according
    #   to the specified ratio
    #   between 0.0 and 1.0 : 0.0 means events will never be duplicated,
    #                         0.5 means approximately half of the events will be duplicated
    #                         1.0 means all events will be duplicated
    #
    # orders
    duplicates.orders.ratio: 0             # events not duplicated
    # cancellations
    duplicates.cancellations.ratio: 0      # events not duplicated
    # stock movements
    duplicates.stockmovements.ratio: 0.1   # duplicate roughly 10% of the events
    # door badge events
    duplicates.badgeins.ratio: 0           # events not duplicated
    # new customer events
    duplicates.newcustomers.ratio: 0       # events not duplicated
    # sensor reading events
    duplicates.sensorreadings.ratio: 0     # events not duplicated

    #
    # format of timestamps to produce
    #
    #    default is chosen to be suitable for use with Event Processing,
    #    but you could modify this if you want to demo how to reformat
    #    timestamps to be compatible with Event Processing
    #
    #    NOTE: sensor readings topic is an exception. Events on this topic
    #           ignore this config option
    #
    formats.timestamps: yyyy-MM-dd HH:mm:ss.SSS
    # format of timestamps with local time zone (UTC time in ISO 8601 format)
    #    NOTE: this format is used by default for online orders 
    formats.timestamps.ltz: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'

    #
    # product names to use in events
    #
    #    these are combined into description strings, to allow for
    #    use of Event Processing string functions like regexp extracts
    #    e.g. "XL Stonewashed Bootcut Jeans"
    #
    #    any or all of these can be modified to theme the demo for a
    #    different industry
    products.sizes: XXS,XS,S,M,L,XL,XXL
    products.materials: Classic,Retro,Navy,Stonewashed,Acid-washed,Blue,Black,White,Khaki,Denim,Jeggings
    products.styles: Skinny,Bootcut,Flare,Ripped,Capri,Jogger,Crochet,High-waist,Low-rise,Straight-leg,Boyfriend,Mom,Wide-leg,Jorts,Cargo,Tall
    products.name: Jeans

    #
    # prices to use for individual products
    #
    #    prices will be randomly generated between the specified range
    prices.min: 14.99
    prices.max: 59.99
    # prices following large order cancellations will be reduced by a random value up to this limit
    prices.maxvariation: 9.99

    #
    # number of items to include in an order
    #
    # "normal" orders will be between small.min and large.max
    #   (i.e. between 1 and 15, inclusive)
    #
    # a "small" order is between 1 and 5 items (inclusive)
    orders.small.quantity.min: 1
    orders.small.quantity.max: 5
    # a "large" order is between 5 and 15 items (inclusive)
    orders.large.quantity.min: 5
    orders.large.quantity.max: 15

    #
    # controlling when orders should be cancelled
    #
    # how many orders on the ORDERS topic should be cancelled (between 0.0 and 1.0)
    cancellations.ratio: 0.005
    # how long after an order should the cancellation happen
    cancellations.delay.ms.min: 300000   # 5 minutes
    cancellations.delay.ms.max: 7200000  # 2 hours
    # reason given for a cancellation
    cancellations.reasons: CHANGEDMIND,BADFIT,SHIPPINGDELAY,DELIVERYERROR,CHEAPERELSEWHERE

    #
    # suspicious orders
    #
    #  these are the events that are looked for in lab 5 and lab 6
    #
    # how quickly will the large order will be cancelled
    suspicious.cancellations.delay.ms.min: 900000    # at least 15 minutes
    suspicious.cancellations.delay.ms.max: 1800000   # within 30 minutes
    # how many large orders will be made and cancelled
    suspicious.cancellations.max: 3   # up to three large orders
    # customer names to be used for suspicious orders will be selected from this
    #  list, to make it easier in lab 5 and 6 to see that you have created the
    #  flow correctly, and to make it easier in lab 4 to see that there are false
    #  positives in the simplified implementation
    suspicious.cancellations.customernames: Suspicious Bob,Naughty Nigel,Criminal Clive,Dastardly Derek

    #
    # new customers
    #
    #  these events are intended to represent new customers that
    #   have registered with the company
    #
    # how many new customers should quickly create their first order
    #  between 0.0 and 1.0 : 0.0 means new customers will still be created, but they will
    #                           never create orders,
    #                         1.0 means all new customers will create an order
    newcustomers.order.ratio: 0.22
    # if a new customer is going to quickly create their first order, how long
    #  should they wait before making their order
    newcustomers.order.delay.ms.min: 180000     # wait at least 3 minutes
    newcustomers.order.delay.ms.max: 1380000    # order within 23 minutes
    
    #
    # online orders
    #
    #  these events are intended to represent orders for several products, 
    #   illustrating the use of complex objects and primitive arrays
    #
    # number of products to include in an online order: between 1 and 5 (inclusive)
    onlineorders.products.min: 1
    onlineorders.products.max: 5
    # number of emails for the customer who makes an online order: between 1 and 2 (inclusive)
    onlineorders.customer.emails.min: 1
    onlineorders.customer.emails.max: 2
    # number of phones in an address for an online order: between 0 and 2 (inclusive)
    #    NOTE: in case of 0 phone number, `null` is generated in the events as value for the `phones` property
    onlineorders.address.phones.min: 0
    onlineorders.address.phones.max: 2
    # how many online orders use the same address as shipping and billing address
    #  between 0.0 and 1.0 : 0.0 means no online order will use the same address as shipping and billing address
    #                        1.0 means all online orders will use the same address as shipping and billing address
    onlineorders.reuse.address.ratio: 0.55
    # how many online orders have at least one product that runs out-of-stock after the order has been placed
    #  between 0.0 and 1.0 : 0.0 means no online order has some product that runs out-of-stock
    #                        1.0 means all online orders have products that run out-of-stock
    onlineorders.outofstock.ratio: 0.22 
    
    #
    # out-of-stocks
    #
    #  these events are intended to represent products that run out-of-stock in online orders
    #
    # how long after an out-of-stock should the restocking happen (in days)
    outofstocks.restocking.delay.days.min: 1  # 1 day
    outofstocks.restocking.delay.days.max: 5  # 5 days
    # how long after an online order should the out-of-stock happen (in milliseconds)
    outofstocks.delay.ms.min: 300000   # 5 minutes
    outofstocks.delay.ms.max: 7200000  # 2 hours
  
    #
    # locations that are referred to in generated events
    #
    locations.regions: NA,SA,EMEA,APAC,ANZ
    locations.warehouses: North,South,West,East,Central