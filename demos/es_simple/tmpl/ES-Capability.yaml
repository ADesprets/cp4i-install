apiVersion: eventstreams.ibm.com/v1beta2
kind: EventStreams
metadata:
  name: $VAR_ES_INSTANCE_NAME
  namespace: $VAR_ES_NAMESPACE
  labels:
    backup.eventstreams.ibm.com/component: eventstreams
spec:
  version: $MY_ES_VERSION
  license: 
    license: $MY_ES_LIC
    accept: true
    use: $MY_ES_LIC_USAGE
  strimziOverrides:
    entityOperator:
      topicOperator: {}
    kafka:
      replicas: 3
      config:
        auto.create.topics.enable: 'false'
        inter.broker.protocol.version: '3.9'
        log.message.format.version: '3.9'
        offsets.topic.replication.factor: 1
        transaction.state.log.min.isr: 1
        transaction.state.log.replication.factor: 1
        default.replication.factor: 3
        min.insync.replicas: 3
      authorization:
        type: simple
      listeners:
        - name: external
          port: 9094
          type: route
          tls: true
          authentication:
            type: scram-sha-512
        - name: tls
          port: 9093
          type: internal
          tls: true
          authentication:
            type: tls
      metricsConfig:
        type: jmxPrometheusExporter
        valueFrom:
          configMapKeyRef:
            key: kafka-metrics-config.yaml
            name: ${VAR_ES_METRICS_CM}
    nodePools:
      - name: kafka
        roles:
          - broker
        replicas: 3
        storage:
          type: persistent-claim
          class: $MY_BLOCK_STORAGE_CLASS
          size: 20Gi
    zookeeper:
      replicas: 1
      metricsConfig:
        type: jmxPrometheusExporter
        valueFrom:
          configMapKeyRef:
            key: zookeeper-metrics-config.yaml
            name: ${VAR_ES_METRICS_CM}
      storage:
        type: persistent-claim
        class: $MY_BLOCK_STORAGE_CLASS
        size: 20Gi
  adminApi: {}
  adminUI:
     authentication:
       - type: scram-sha-512
  apicurioRegistry: {}
  collector: {}
  restProducer: {}
  security:
    internalTls: TLSv1.2